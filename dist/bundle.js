!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=2)}([function(t,e){t.exports=PIXI},function(t,e){t.exports=$},function(t,e,i){"use strict";i.r(e);var n,r=i(0),o=function(){function t(t,e,i,n,o,a){this.path=t,this.border=e,this.tileHeight=n,this.tileWidth=i,this.rows=o,this.columns=a,this.bigTexture=r.Texture.fromImage(t,!0,r.SCALE_MODES.NEAREST),this.textures=[]}return t.prototype.getTexture=function(t){if(this.textures[t])return this.textures[t];var e=Math.floor((t-1)/this.columns),i=(t-1)%this.columns,n=this.tileWidth,o=this.tileHeight,a=i*n+i*this.border,s=e*o+e*this.border,p=new r.Texture(this.bigTexture.baseTexture,new r.Rectangle(a,s,n,o));return this.textures[t]=p,p},t}(),a=function(){function t(e,i,n,o){this.map=n,this.playerId=o,this.animations=[];for(var a=r.Texture.fromImage("data/assets/player_"+o+".png").baseTexture,s=0;s<4;s++){for(var p=[],c=0;c<3;c++){var u=new r.Texture(a,new r.Rectangle(c*t.SPRITE_WIDTH,s*t.SPRITE_HEIGHT,t.SPRITE_WIDTH,t.SPRITE_HEIGHT));p.push(u)}this.animations.push(p)}this.sprite=new r.extras.AnimatedSprite(this.animations[t.DOWN]),this.sprite.x=e,this.sprite.y=i,this.vx=0,this.vy=0,this.sprite.scale=t.SPRITE_SCALE,this.sprite.animationSpeed=.13,this.sprite.loop=!0,this.lastKey=""}return t.prototype.changeDirection=function(e){0<=e&&e<=3?(this.sprite.textures=this.animations[e],this.sprite.play()):e==t.STOP&&this.sprite.stop()},t.prototype.keyDown=function(e){if(e.key!=this.lastKey)switch(this.lastKey=e.key,e.key){case"ArrowUp":this.vy=-1*t.PLAYER_SPEED,this.changeDirection(t.UP);break;case"ArrowDown":this.vy=1*t.PLAYER_SPEED,this.changeDirection(t.DOWN);break;case"ArrowLeft":this.vx=-1*t.PLAYER_SPEED,this.changeDirection(t.LEFT);break;case"ArrowRight":this.vx=1*t.PLAYER_SPEED,this.changeDirection(t.RIGHT)}},t.prototype.keyUp=function(e){switch(this.lastKey="",e.key){case"ArrowUp":case"ArrowDown":this.vy=0,this.changeDirection(t.STOP);break;case"ArrowLeft":case"ArrowRight":this.vx=0,this.changeDirection(t.STOP)}},t.prototype.doStep=function(t){var e=this.sprite.x+this.vx*t,i=this.sprite.y+this.vy*t;Math.floor(e/this.map.finalTileWidth),Math.floor((e+this.sprite.width)/this.map.finalTileWidth),Math.floor(i/this.map.finalTileHeight),Math.floor((i+this.sprite.height)/this.map.finalTileHeight);this.sprite.x=e,this.sprite.y=i;var n=this.sprite.x/this.map.finalTileWidth;n=Math.round(n);var r=this.sprite.y/this.map.finalTileHeight;r=Math.round(r)},t.UP=0,t.RIGHT=1,t.DOWN=2,t.LEFT=3,t.STOP=4,t.SPRITE_WIDTH=32,t.SPRITE_HEIGHT=36,t.SPRITE_SCALE=new r.Point(1.5,1.5),t.PLAYER_SPEED=3,t}(),s=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),p=function(t){function e(e,i,n,r){var o=t.call(this,e)||this;return o.gridX=i,o.gridY=n,o.map=r,o.x=i*r.finalTileWidth,o.y=n*r.finalTileHeight,o}return s(e,t),e.prototype.onHit=function(t){this.tileObject&&this.tileObject.onHit(t)},e.prototype.onPlant=function(t){this.tileObject&&this.tileObject.onPlant(t)},e.prototype.onPlace=function(t){null==this.tileObject&&console.log("Placing Pumpkin TNT")},e.prototype.onHarvest=function(t){this.tileObject&&this.tileObject.onHarvest(t)},e.prototype.isFree=function(){return!this.tileObject},e}(r.Sprite),c=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),u=function(t){function e(e,i){var n=t.call(this,e)||this;if(n.parent=i,!n.parent.isFree())throw new Error("Can't add TileObject to a Tile that allready has an TileObject");return n.parent.tileObject=n,n.x=n.parent.x,n.y=n.parent.y,n}return c(e,t),e.prototype.onHit=function(t){},e.prototype.onPlant=function(t){},e.prototype.onHarvest=function(t){},e.prototype.onDestroy=function(t){delete this.parent.tileObject,this.destroy()},e}(r.Sprite),h=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),l=function(t){function e(e,i,n){var r=t.call(this,e,i)||this;return r.owner=n,r}return h(e,t),e.prototype.onHit=function(t){},e.prototype.onDestroy=function(t){},e}(u),f=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return f(e,t),e.prototype.onHit=function(t){},e.prototype.onDestroy=function(t){},e.prototype.onHarvest=function(t){},e}(u),d=i(1),g=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),v=function(t){function e(){var e=t.call(this)||this;return e.tileContainer=new r.Container,e.addChild(e.tileContainer),e.tileObjectContainer=new r.Container,e.addChild(e.tileObjectContainer),e.playerContainer=new r.Container,e.addChild(e.playerContainer),e.players=[],e}return g(e,t),e.prototype.getMapObjectProperty=function(t,e){for(var i=0,n=t.properties;i<n.length;i++){var r=n[i];if(r.name==e)return r.value}},e.loadMap=function(t,i,n){var o=new e,s=new r.Point(e.MAP_ZOOM,e.MAP_ZOOM);o.finalTileWidth=i.tileWidth*s.x,o.finalTileHeight=i.tileHeight*s.y,o.spritesheet=i,d.getJSON(t,{},(function(t){for(var e=0,r=t.layers;e<r.length;e++){if("tilelayer"==(T=r[e]).type){o.gridWidth=T.width,o.gridHeight=T.height,o.tiles=new Array(o.gridHeight);for(var c=0;c<o.tiles.length;c++)o.tiles[c]=new Array(o.gridWidth);for(var u=0;u<T.height;u++)for(var h=0;h<T.width;h++){var f=u*T.width+h;if(T.data[f]>0){var d=i.getTexture(T.data[f]),g=new p(d,u,h,o);o.addTile(g)}}}}for(var v=0,_=t.layers;v<_.length;v++){var T;if("objectgroup"==(T=_[v]).type){for(var P=0,w=T.objects;P<w.length;P++){if("player"==(m=w[P]).type){var O=Math.round(m.x*s.x),b=(Math.round(m.y)-m.height)*s.y,E=o.getMapObjectProperty(m,"playerId"),x=new a(O,b,this,E);o.addPlayer(x)}}for(var S=0,j=T.objects;S<j.length;S++){var m;if("tower"==(m=j[S]).type){d=i.getTexture(m.gid);var A=o.getMapObjectProperty(m,"owner"),C=o.players[A],D=o.getTileNearestTo(m),k=new l(d,D,C);o.addTileObject(k)}else if("tree"==m.type){d=i.getTexture(m.gid);var H=o.getTileNearestTo(m),M=new y(d,H);o.addTileObject(M)}}}}n(o)}))},e.prototype.addPlayer=function(t){this.players[t.playerId]=t,this.playerContainer.addChild(t.sprite)},e.prototype.addTileObject=function(t){t.scale=e.SPRITE_SCALE,this.playerContainer.addChild(t)},e.prototype.addTile=function(t){t.x=t.gridX*this.spritesheet.tileWidth*e.SPRITE_SCALE.x,t.y=t.gridY*this.spritesheet.tileHeight*e.SPRITE_SCALE.y,t.scale=e.SPRITE_SCALE,this.tiles[t.gridY][t.gridX]=t,this.tileContainer.addChild(t)},e.prototype.pause=function(){this.isPaused=!0},e.prototype.play=function(){this.isPaused=!1},e.prototype.getObjectCoordinates=function(t){var i=t.x*e.SPRITE_SCALE.x/this.finalTileWidth;i=Math.round(i);var n=(t.y-t.height)*e.SPRITE_SCALE.y/this.finalTileHeight;return{gridX:i,gridY:n=Math.round(n)}},e.prototype.getTileNearestTo=function(t){var e=this.getObjectCoordinates(t);return this.tiles[e.gridY][e.gridX]},e.MAP_ZOOM=4,e.SPRITE_SCALE=new r.Point(e.MAP_ZOOM,e.MAP_ZOOM),e}(r.Container),_=function(){function t(){}return t.init=function(){document.addEventListener("keyup",t.onKeyUp),document.addEventListener("keydown",t.onKeyDown)},t.onKeyUp=function(e){for(var i in t.keyUps){var n=t.keyUps[i];e.key==n.key&&"function"==typeof n.onKeyUp&&n.onKeyUp(e)}},t.onKeyDown=function(e){for(var i in t.keyDowns){var n=t.keyDowns[i];e.key==n.key&&"function"==typeof n.onKeyDown&&n.onKeyDown(e)}},t.registerKey=function(e,i,n,r){t.keyDowns[r]={key:e,onKeyDown:i},t.keyUps[r]={key:e,onKeyUp:n}},t.unregisterKey=function(e){delete t.keyDowns[e],delete t.keyUps[e]},t.keyUps={},t.keyDowns={},t}(),T=function(){function t(){}return t.register=function(e,i,n){t.clients[e]={callback:i,myself:n}},t.unregister=function(e){delete t.clients[e]},t.doStep=function(e){if(!t.isPaused)for(var i in t.clients){(0,t.clients[i].callback)(t.clients[i].myself,e)}},t.clients={},t.isPaused=!0,t}(),P=new o("data/assets/spritesheet.png",1,16,16,31,57);(function(){function t(){}return t.startGame=function(){var e=new function(t,e,i){this.width=t,this.height=e,this.view=i}(1e3,700,t.myCanvas);t.pixiApp=new r.Application(e),document.body.appendChild(t.pixiApp.view),_.init(),t.pixiApp.ticker.add(T.doStep),v.loadMap("data/maps/map1.json",P,(function(e){console.log("Map parsed"),t.map=e,t.pixiApp.stage.addChild(e),t.pixiApp.ticker.start()}))},t.myCanvas=document.getElementById("#pixiCanvas"),t})().startGame()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,