!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e){t.exports=PIXI},function(t,e){t.exports=$},function(t,e,n){"use strict";n.r(e);var r,i=n(0),o=function(){function t(t,e,n,r,o,a){this.path=t,this.border=e,this.tileHeight=r,this.tileWidth=n,this.rows=o,this.columns=a,this.bigTexture=i.Texture.fromImage(t,!0,i.SCALE_MODES.NEAREST),this.textures=[]}return t.prototype.getTexture=function(t){if(this.textures[t])return this.textures[t];var e=Math.floor((t-1)/this.columns),n=(t-1)%this.columns,r=this.tileWidth,o=this.tileHeight,a=n*r+n*this.border,s=e*o+e*this.border,p=new i.Texture(this.bigTexture.baseTexture,new i.Rectangle(a,s,r,o));return this.textures[t]=p,p},t}(),a=function(){function t(){}return t.init=function(){document.addEventListener("keyup",t.onKeyUp),document.addEventListener("keydown",t.onKeyDown)},t.onKeyUp=function(e){for(var n in t.keyUps){var r=t.keyUps[n];r.key!=t.ANY_KEY&&e.key!=r.key||"function"==typeof r.onKeyUp&&r.onKeyUp(e)}},t.onKeyDown=function(e){for(var n in t.keyDowns){var r=t.keyDowns[n];r.key!=t.ANY_KEY&&e.key!=r.key||"function"==typeof r.onKeyDown&&r.onKeyDown(e)}},t.registerKey=function(e,n,r,i){t.keyDowns[i]={key:e,onKeyDown:n},t.keyUps[i]={key:e,onKeyUp:r}},t.unregisterKey=function(e){delete t.keyDowns[e],delete t.keyUps[e]},t.keyUps={},t.keyDowns={},t.ANY_KEY="any_key",t}(),s=function(){function t(){}return t.register=function(e,n){t.clients[e]={callback:n}},t.unregister=function(e){delete t.clients[e]},t.doStep=function(e){if(!t.isPaused)for(var n in t.clients){(0,t.clients[n].callback)(e)}},t.clients={},t.isPaused=!1,t}(),p=function(){function t(e,n,r,o){var p=this;this.keyDown=function(e){if(e.key!=p.lastKey)switch(p.lastKey=e.key,e.key){case p.upKey:p.changeDirection(t.UP),p.vy=-1*t.PLAYER_SPEED;break;case p.downKey:p.changeDirection(t.DOWN),p.vy=1*t.PLAYER_SPEED;break;case p.leftKey:p.changeDirection(t.LEFT),p.vx=-1*t.PLAYER_SPEED;break;case p.rightKey:p.changeDirection(t.RIGHT),p.vx=1*t.PLAYER_SPEED}},this.keyUp=function(e){switch(p.lastKey="",e.key){case p.upKey:case p.downKey:p.changeDirection(t.STOP),p.vy=0;break;case p.leftKey:case p.rightKey:p.changeDirection(t.STOP),p.vx=0}},this.doStep=function(t){var e=p.sprite.x+p.vx*t,n=p.sprite.y+p.vy*t;p.sprite.x=e,p.sprite.y=n},this.map=r,this.playerId=o,this.animations=[];for(var c=i.Texture.fromImage("data/assets/player_"+o+".png").baseTexture,u=0;u<4;u++){for(var y=[],h=0;h<3;h++){var l=new i.Texture(c,new i.Rectangle(h*t.SPRITE_WIDTH,u*t.SPRITE_HEIGHT,t.SPRITE_WIDTH,t.SPRITE_HEIGHT));y.push(l)}this.animations.push(y)}this.sprite=new i.extras.AnimatedSprite(this.animations[t.DOWN]),this.sprite.x=e,this.sprite.y=n,this.vx=0,this.vy=0,this.sprite.scale=t.SPRITE_SCALE,this.sprite.animationSpeed=.13,this.sprite.loop=!0,this.lastKey="",a.registerKey(a.ANY_KEY,this.keyDown,this.keyUp,"player"+o),s.register("player"+o,this.doStep)}return t.prototype.changeDirection=function(e){0<=e&&e<=3?(this.sprite.textures=this.animations[e],this.sprite.play()):e==t.STOP&&this.sprite.stop()},t.prototype.setKeys=function(t,e,n,r,i,o){this.upKey=t,this.downKey=e,this.leftKey=n,this.rightKey=r,this.actionKey=i,this.selectKey=o},t.UP=0,t.RIGHT=1,t.DOWN=2,t.LEFT=3,t.STOP=4,t.SPRITE_WIDTH=32,t.SPRITE_HEIGHT=36,t.SPRITE_SCALE=new i.Point(1.5,1.5),t.PLAYER_SPEED=4,t}(),c=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),u=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.gridX=n,o.gridY=r,o.map=i,o.x=n*i.finalTileWidth,o.y=r*i.finalTileHeight,o}return c(e,t),e.prototype.onHit=function(t){this.tileObject&&this.tileObject.onHit(t)},e.prototype.onPlant=function(t){this.tileObject&&this.tileObject.onPlant(t)},e.prototype.onPlace=function(t){null==this.tileObject&&console.log("Placing Pumpkin TNT")},e.prototype.onHarvest=function(t){this.tileObject&&this.tileObject.onHarvest(t)},e.prototype.isFree=function(){return!this.tileObject},e}(i.Sprite),y=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),h=function(t){function e(e,n){var r=t.call(this,e)||this;if(r.parent=n,!r.parent.isFree())throw new Error("Can't add TileObject to a Tile that allready has an TileObject");return r.parent.tileObject=r,r.x=r.parent.x,r.y=r.parent.y,r}return y(e,t),e.prototype.onHit=function(t){},e.prototype.onPlant=function(t){},e.prototype.onHarvest=function(t){},e.prototype.onDestroy=function(t){delete this.parent.tileObject,this.destroy()},e}(i.Sprite),l=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),f=function(t){function e(e,n,r){var i=t.call(this,e,n)||this;return i.owner=r,i}return l(e,t),e.prototype.onHit=function(t){},e.prototype.onDestroy=function(t){},e}(h),d=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),g=function(t){function e(n,r){var o=t.call(this)||this;return o.parent=n,o.progress=r,n.parent.map.tileObjectContainer.addChild(o),o.x=n.x,o.y=n.y,o.width=n.width,o.height=n.height,o.frame=new i.Graphics,o.frame.lineStyle(e.LINE_THICKNESS,16711680),o.frame.drawRect(0,0,64,3*e.LINE_THICKNESS),o.addChild(o.frame),o.setProgress(r),o}return d(e,t),e.prototype.updateView=function(){this.progressShape=new i.Graphics,this.progressShape.lineStyle(e.LINE_THICKNESS,65280),this.progressShape.drawRect(e.LINE_THICKNESS,e.LINE_THICKNESS,64*this.progress,e.LINE_THICKNESS),this.addChild(this.progressShape)},e.prototype.setProgress=function(t){this.progress=t,this.updateView()},e.LINE_THICKNESS=3,e}(i.Container),_=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),w=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.statusBar=new g(r,.5),r}return _(e,t),e.prototype.onHit=function(t){},e.prototype.onDestroy=function(t){},e.prototype.onHarvest=function(t){},e}(h),v=n(1),P=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),O=function(t){function e(){var e=t.call(this)||this;return e.tileContainer=new i.Container,e.addChild(e.tileContainer),e.tileObjectContainer=new i.Container,e.addChild(e.tileObjectContainer),e.playerContainer=new i.Container,e.addChild(e.playerContainer),e.players=[],e}return P(e,t),e.prototype.getMapObjectProperty=function(t,e){for(var n=0,r=t.properties;n<r.length;n++){var i=r[n];if(i.name==e)return i.value}},e.loadMap=function(t,n,r){var o=new e,a=new i.Point(e.MAP_ZOOM,e.MAP_ZOOM);o.finalTileWidth=n.tileWidth*a.x,o.finalTileHeight=n.tileHeight*a.y,o.spritesheet=n,v.getJSON(t,{},(function(t){for(var e=0,i=t.layers;e<i.length;e++){if("tilelayer"==(v=i[e]).type){o.gridWidth=v.width,o.gridHeight=v.height,o.tiles=new Array(o.gridHeight);for(var s=0;s<o.tiles.length;s++)o.tiles[s]=new Array(o.gridWidth);for(var c=0;c<v.height;c++)for(var y=0;y<v.width;y++){var h=c*v.width+y;if(v.data[h]>0){var l=n.getTexture(v.data[h]),d=new u(l,c,y,o);o.addTile(d)}}}}for(var g=0,_=t.layers;g<_.length;g++){var v;if("objectgroup"==(v=_[g]).type){for(var P=0,O=v.objects;P<O.length;P++){if("player"==(C=O[P]).type){var T=Math.round(C.x*a.x),S=(Math.round(C.y)-C.height)*a.y,E=o.getMapObjectProperty(C,"playerId"),b=new p(T,S,this,E);o.addPlayer(b)}}for(var x=0,j=v.objects;x<j.length;x++){var C;if("tower"==(C=j[x]).type){l=n.getTexture(C.gid);var K=o.getMapObjectProperty(C,"owner"),A=o.players[K],I=o.getTileNearestTo(C),k=new f(l,I,A);o.addTileObject(k)}else if("tree"==C.type){l=n.getTexture(C.gid);var m=o.getTileNearestTo(C),H=new w(l,m);o.addTileObject(H)}}}}r(o)}))},e.prototype.addPlayer=function(t){this.players[t.playerId]=t,this.playerContainer.addChild(t.sprite)},e.prototype.addTileObject=function(t){t.scale=e.SPRITE_SCALE,this.playerContainer.addChild(t)},e.prototype.addTile=function(t){t.x=t.gridX*this.spritesheet.tileWidth*e.SPRITE_SCALE.x,t.y=t.gridY*this.spritesheet.tileHeight*e.SPRITE_SCALE.y,t.scale=e.SPRITE_SCALE,this.tiles[t.gridY][t.gridX]=t,this.tileContainer.addChild(t)},e.prototype.pause=function(){this.isPaused=!0},e.prototype.play=function(){this.isPaused=!1},e.prototype.getObjectCoordinates=function(t){var n=t.x*e.SPRITE_SCALE.x/this.finalTileWidth;n=Math.round(n);var r=(t.y-t.height)*e.SPRITE_SCALE.y/this.finalTileHeight;return{gridX:n,gridY:r=Math.round(r)}},e.prototype.getTileNearestTo=function(t){var e=this.getObjectCoordinates(t);return this.tiles[e.gridY][e.gridX]},e.MAP_ZOOM=4,e.SPRITE_SCALE=new i.Point(e.MAP_ZOOM,e.MAP_ZOOM),e}(i.Container),T=new o("data/assets/spritesheet.png",1,16,16,31,57);(function(){function t(){}return t.startGame=function(){var e=new function(t,e){this.width=t,this.height=e}(512,512);t.pixiApp=new i.Application(e),document.body.appendChild(t.pixiApp.view),a.init(),t.pixiApp.ticker.add(s.doStep),O.loadMap("data/maps/map1.json",T,(function(e){console.log("Map parsed"),t.map=e,t.pixiApp.stage.addChild(e),t.pixiApp.ticker.start();var n=e.players;n[0].setKeys("ArrowUp","ArrowDown","ArrowLeft","ArrowRight","m","n"),n[1].setKeys("w","s","a","d","x","y")}))},t})().startGame()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,