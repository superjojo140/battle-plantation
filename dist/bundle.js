!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);var n,r=function(){function t(t,e,i,n,r,o){this.path=t,this.border=e,this.tileHeight=n,this.tileWidth=i,this.rows=r,this.columns=o,this.bigTexture=PIXI.Texture.fromImage(t,!0,PIXI.SCALE_MODES.NEAREST),this.textures=[]}return t.prototype.getTexture=function(t){if(this.textures[t])return this.textures[t];var e=Math.floor((t-1)/this.columns),i=(t-1)%this.columns,n=this.tileWidth,r=this.tileHeight,o=i*n+i*this.border,a=e*r+e*this.border,s=new PIXI.Texture(this.bigTexture.baseTexture,new PIXI.Rectangle(o,a,n,r));return this.textures[t]=s,s},t}(),o=function(){function t(e,i,n,r){this.map=n,this.playerId=r,this.animations=[];for(var o=PIXI.Texture.fromImage("data/assets/player_"+r+".png").baseTexture,a=0;a<4;a++){for(var s=[],p=0;p<3;p++){var c=new PIXI.Texture(o,new PIXI.Rectangle(p*t.SPRITE_WIDTH,a*t.SPRITE_HEIGHT,t.SPRITE_WIDTH,t.SPRITE_HEIGHT));s.push(c)}this.animations.push(s)}this.sprite=new PIXI.extras.AnimatedSprite(this.animations[t.DOWN]),this.sprite.x=e,this.sprite.y=i,this.vx=0,this.vy=0,this.sprite.scale=t.SPRITE_SCALE,this.sprite.animationSpeed=.13,this.sprite.loop=!0,this.lastKey=""}return t.prototype.changeDirection=function(e){0<=e&&e<=3?(this.sprite.textures=this.animations[e],this.sprite.play()):e==t.STOP&&this.sprite.stop()},t.prototype.keyDown=function(e){if(e.key!=this.lastKey)switch(this.lastKey=e.key,e.key){case"ArrowUp":this.vy=-1*t.PLAYER_SPEED,this.changeDirection(t.UP);break;case"ArrowDown":this.vy=1*t.PLAYER_SPEED,this.changeDirection(t.DOWN);break;case"ArrowLeft":this.vx=-1*t.PLAYER_SPEED,this.changeDirection(t.LEFT);break;case"ArrowRight":this.vx=1*t.PLAYER_SPEED,this.changeDirection(t.RIGHT)}},t.prototype.keyUp=function(e){switch(this.lastKey="",e.key){case"ArrowUp":case"ArrowDown":this.vy=0,this.changeDirection(t.STOP);break;case"ArrowLeft":case"ArrowRight":this.vx=0,this.changeDirection(t.STOP)}},t.prototype.doStep=function(t){var e=this.sprite.x+this.vx*t,i=this.sprite.y+this.vy*t;Math.floor(e/this.map.finalTileWidth),Math.floor((e+this.sprite.width)/this.map.finalTileWidth),Math.floor(i/this.map.finalTileHeight),Math.floor((i+this.sprite.height)/this.map.finalTileHeight);this.sprite.x=e,this.sprite.y=i;var n=this.sprite.x/this.map.finalTileWidth;n=Math.round(n);var r=this.sprite.y/this.map.finalTileHeight;r=Math.round(r)},t.UP=0,t.RIGHT=1,t.DOWN=2,t.LEFT=3,t.STOP=4,t.SPRITE_WIDTH=32,t.SPRITE_HEIGHT=36,t.SPRITE_SCALE=new PIXI.Point(1.5,1.5),t.PLAYER_SPEED=3,t}(),a=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),s=function(t){function e(e,i,n,r){var o=t.call(this,e)||this;return o.gridX=i,o.gridY=n,o.map=r,o.x=i*r.finalTileWidth,o.y=n*r.finalTileHeight,o}return a(e,t),e.prototype.onHit=function(t){this.tileObject&&this.tileObject.onHit(t)},e.prototype.onPlant=function(t){this.tileObject&&this.tileObject.onPlant(t)},e.prototype.onPlace=function(t){null==this.tileObject&&console.log("Placing Pumpkin TNT")},e.prototype.onHarvest=function(t){this.tileObject&&this.tileObject.onHarvest(t)},e.prototype.isFree=function(){return!this.tileObject},e}(PIXI.Sprite),p=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),c=function(t){function e(e,i){var n=t.call(this,e)||this;if(n.parent=i,!n.parent.isFree())throw new Error("Can't add TileObject to a Tile that allready has an TileObject");return n.parent.tileObject=n,n.x=n.parent.x,n.y=n.parent.y,n}return p(e,t),e.prototype.onHit=function(t){},e.prototype.onPlant=function(t){},e.prototype.onHarvest=function(t){},e.prototype.onDestroy=function(t){delete this.parent.tileObject,this.destroy()},e}(PIXI.Sprite),u=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),h=function(t){function e(e,i,n){var r=t.call(this,e,i)||this;return r.owner=n,r}return u(e,t),e.prototype.onHit=function(t){},e.prototype.onDestroy=function(t){},e}(c),l=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),f=function(t){function e(e,i){return t.call(this,e,i)||this}return l(e,t),e.prototype.onHit=function(t){},e.prototype.onDestroy=function(t){},e.prototype.onHarvest=function(t){},e}(c),y=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),d=function(t){function e(){var e=t.call(this)||this;return e.tileContainer=new PIXI.Container,e.addChild(e.tileContainer),e.tileObjectContainer=new PIXI.Container,e.addChild(e.tileObjectContainer),e.playerContainer=new PIXI.Container,e.addChild(e.playerContainer),e.players=[],e}return y(e,t),e.prototype.getMapObjectProperty=function(t,e){for(var i=0,n=t.properties;i<n.length;i++){var r=n[i];if(r.name==e)return r.value}},e.loadMap=function(t,i,n){var r=new e,a=new PIXI.Point(e.MAP_ZOOM,e.MAP_ZOOM);r.finalTileWidth=i.tileWidth*a.x,r.finalTileHeight=i.tileHeight*a.y,r.spritesheet=i,$.getJSON(t,{},(function(t){for(var e=0,p=t.layers;e<p.length;e++){if("tilelayer"==(_=p[e]).type){r.gridWidth=_.width,r.gridHeight=_.height,r.tiles=new Array(r.gridHeight);for(var c=0;c<r.tiles.length;c++)r.tiles[c]=new Array(r.gridWidth);for(var u=0;u<_.height;u++)for(var l=0;l<_.width;l++){var y=u*_.width+l;if(_.data[y]>0){var d=i.getTexture(_.data[y]),P=new s(d,u,l,r);r.addTile(P)}}}}for(var g=0,v=t.layers;g<v.length;g++){var _;if("objectgroup"==(_=v[g]).type){for(var T=0,w=_.objects;T<w.length;T++){if("player"==(j=w[T]).type){var O=Math.round(j.x*a.x),I=(Math.round(j.y)-j.height)*a.y,b=r.getMapObjectProperty(j,"playerId"),E=new o(O,I,this,b);r.addPlayer(E)}}for(var S=0,x=_.objects;S<x.length;S++){var j;if("tower"==(j=x[S]).type){d=i.getTexture(j.gid);var m=r.getMapObjectProperty(j,"owner"),A=r.players[m],C=r.getTileNearestTo(j),D=new h(d,C,A);r.addTileObject(D)}else if("tree"==j.type){d=i.getTexture(j.gid);var k=r.getTileNearestTo(j),H=new f(d,k);r.addTileObject(H)}}}}n(r)}))},e.prototype.addPlayer=function(t){this.players[t.playerId]=t,this.playerContainer.addChild(t.sprite)},e.prototype.addTileObject=function(t){t.scale=e.SPRITE_SCALE,this.playerContainer.addChild(t)},e.prototype.addTile=function(t){t.x=t.gridX*this.spritesheet.tileWidth*e.SPRITE_SCALE.x,t.y=t.gridY*this.spritesheet.tileHeight*e.SPRITE_SCALE.y,t.scale=e.SPRITE_SCALE,this.tiles[t.gridY][t.gridX]=t,this.tileContainer.addChild(t)},e.prototype.pause=function(){this.isPaused=!0},e.prototype.play=function(){this.isPaused=!1},e.prototype.getObjectCoordinates=function(t){var i=t.x*e.SPRITE_SCALE.x/this.finalTileWidth;i=Math.round(i);var n=(t.y-t.height)*e.SPRITE_SCALE.y/this.finalTileHeight;return{gridX:i,gridY:n=Math.round(n)}},e.prototype.getTileNearestTo=function(t){var e=this.getObjectCoordinates(t);return this.tiles[e.gridY][e.gridX]},e.MAP_ZOOM=4,e.SPRITE_SCALE=new PIXI.Point(e.MAP_ZOOM,e.MAP_ZOOM),e}(PIXI.Container),P=function(){function t(){}return t.init=function(){document.addEventListener("keyup",t.onKeyUp),document.addEventListener("keydown",t.onKeyDown)},t.onKeyUp=function(e){for(var i in t.keyUps){var n=t.keyUps[i];e.key==n.key&&"function"==typeof n.onKeyUp&&n.onKeyUp(e)}},t.onKeyDown=function(e){for(var i in t.keyDowns){var n=t.keyDowns[i];e.key==n.key&&"function"==typeof n.onKeyDown&&n.onKeyDown(e)}},t.registerKey=function(e,i,n,r){t.keyDowns[r]={key:e,onKeyDown:i},t.keyUps[r]={key:e,onKeyUp:n}},t.unregisterKey=function(e){delete t.keyDowns[e],delete t.keyUps[e]},t.keyUps={},t.keyDowns={},t}(),g=function(){function t(){}return t.register=function(e,i,n){t.clients[e]={callback:i,myself:n}},t.unregister=function(e){delete t.clients[e]},t.doStep=function(e){if(!t.isPaused)for(var i in t.clients){(0,t.clients[i].callback)(t.clients[i].myself,e)}},t.clients={},t.isPaused=!0,t}(),v=new r("data/assets/spritesheet.png",1,16,16,31,57);(function(){function t(){}return t.startGame=function(){var e=new function(t,e,i){this.width=t,this.height=e,this.view=i}(1e3,700,t.myCanvas);t.pixiApp=new PIXI.Application(e),document.body.appendChild(t.pixiApp.view),P.init(),t.pixiApp.ticker.add(g.doStep),d.loadMap("/data/maps/map1.json",v,(function(e){console.log("Map parsed"),t.map=e,t.pixiApp.stage.addChild(e),t.pixiApp.ticker.start()}))},t.myCanvas=document.getElementById("#pixiCanvas"),t})().startGame()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,