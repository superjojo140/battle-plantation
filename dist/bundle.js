!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e){t.exports=PIXI},function(t,e){t.exports=$},function(t,e,n){"use strict";n.r(e);var i,r=n(0),o=function(){function t(t,e,n,i,o,a){this.path=t,this.border=e,this.tileHeight=i,this.tileWidth=n,this.rows=o,this.columns=a,this.bigTexture=r.Texture.fromImage(t,!0,r.SCALE_MODES.NEAREST),this.textures=[]}return t.prototype.getTexture=function(t){if(this.textures[t])return this.textures[t];var e=Math.floor((t-1)/this.columns),n=(t-1)%this.columns,i=this.tileWidth,o=this.tileHeight,a=n*i+n*this.border,s=e*o+e*this.border,p=new r.Texture(this.bigTexture.baseTexture,new r.Rectangle(a,s,i,o));return this.textures[t]=p,p},t}(),a=function(){function t(){}return t.init=function(){document.addEventListener("keyup",t.onKeyUp),document.addEventListener("keydown",t.onKeyDown)},t.onKeyUp=function(e){for(var n in t.keyUps){var i=t.keyUps[n];i.key!=t.ANY_KEY&&e.key!=i.key||"function"==typeof i.onKeyUp&&i.onKeyUp(e)}},t.onKeyDown=function(e){for(var n in t.keyDowns){var i=t.keyDowns[n];i.key!=t.ANY_KEY&&e.key!=i.key||"function"==typeof i.onKeyDown&&i.onKeyDown(e)}},t.registerKey=function(e,n,i,r){t.keyDowns[r]={key:e,onKeyDown:n},t.keyUps[r]={key:e,onKeyUp:i}},t.unregisterKey=function(e){delete t.keyDowns[e],delete t.keyUps[e]},t.keyUps={},t.keyDowns={},t.ANY_KEY="any_key",t}(),s=function(){function t(){}return t.register=function(e,n){t.clients[e]={callback:n}},t.unregister=function(e){delete t.clients[e]},t.doStep=function(e){if(!t.isPaused)for(var n in t.clients){(0,t.clients[n].callback)(e)}},t.clients={},t.isPaused=!1,t}(),p=function(){function t(e,n,i,o){var p=this;this.keyDown=function(e){if(e.key!=p.lastKey)switch(p.lastKey=e.key,e.key){case p.upKey:p.changeDirection(t.UP),p.vy=-1*t.PLAYER_SPEED;break;case p.downKey:p.changeDirection(t.DOWN),p.vy=1*t.PLAYER_SPEED;break;case p.leftKey:p.changeDirection(t.LEFT),p.vx=-1*t.PLAYER_SPEED;break;case p.rightKey:p.changeDirection(t.RIGHT),p.vx=1*t.PLAYER_SPEED}},this.keyUp=function(e){switch(p.lastKey="",e.key){case p.upKey:case p.downKey:p.changeDirection(t.STOP),p.vy=0;break;case p.leftKey:case p.rightKey:p.changeDirection(t.STOP),p.vx=0}},this.doStep=function(t){var e=p.sprite.x+p.vx*t,n=p.sprite.y+p.vy*t;p.sprite.x=e,p.sprite.y=n},this.map=i,this.playerId=o,this.animations=[];for(var c=r.Texture.fromImage("data/assets/player_"+o+".png").baseTexture,u=0;u<4;u++){for(var y=[],l=0;l<3;l++){var f=new r.Texture(c,new r.Rectangle(l*t.SPRITE_WIDTH,u*t.SPRITE_HEIGHT,t.SPRITE_WIDTH,t.SPRITE_HEIGHT));y.push(f)}this.animations.push(y)}this.sprite=new r.extras.AnimatedSprite(this.animations[t.DOWN]),this.sprite.x=e,this.sprite.y=n,this.vx=0,this.vy=0,this.sprite.scale=t.SPRITE_SCALE,this.sprite.animationSpeed=.13,this.sprite.loop=!0,this.lastKey="",a.registerKey(a.ANY_KEY,this.keyDown,this.keyUp,"player"+o),s.register("player"+o,this.doStep)}return t.prototype.changeDirection=function(e){0<=e&&e<=3?(this.sprite.textures=this.animations[e],this.sprite.play()):e==t.STOP&&this.sprite.stop()},t.prototype.setKeys=function(t,e,n,i,r,o){this.upKey=t,this.downKey=e,this.leftKey=n,this.rightKey=i,this.actionKey=r,this.selectKey=o},t.UP=0,t.RIGHT=1,t.DOWN=2,t.LEFT=3,t.STOP=4,t.SPRITE_WIDTH=32,t.SPRITE_HEIGHT=36,t.SPRITE_SCALE=new r.Point(1.5,1.5),t.PLAYER_SPEED=4,t}(),c=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),u=function(t){function e(e,n,i,r){var o=t.call(this,e)||this;return o.gridX=n,o.gridY=i,o.map=r,o.x=n*r.finalTileWidth,o.y=i*r.finalTileHeight,o}return c(e,t),e.prototype.onHit=function(t){this.tileObject&&this.tileObject.onHit(t)},e.prototype.onPlant=function(t){this.tileObject&&this.tileObject.onPlant(t)},e.prototype.onPlace=function(t){null==this.tileObject&&console.log("Placing Pumpkin TNT")},e.prototype.onHarvest=function(t){this.tileObject&&this.tileObject.onHarvest(t)},e.prototype.isFree=function(){return!this.tileObject},e}(r.Sprite),y=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),l=function(t){function e(e,n){var i=t.call(this,e)||this;if(i.parent=n,!i.parent.isFree())throw new Error("Can't add TileObject to a Tile that allready has an TileObject");return i.parent.tileObject=i,i.x=i.parent.x,i.y=i.parent.y,i}return y(e,t),e.prototype.onHit=function(t){},e.prototype.onPlant=function(t){},e.prototype.onHarvest=function(t){},e.prototype.onDestroy=function(t){delete this.parent.tileObject,this.destroy()},e}(r.Sprite),f=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),h=function(t){function e(e,n,i){var r=t.call(this,e,n)||this;return r.owner=i,r}return f(e,t),e.prototype.onHit=function(t){},e.prototype.onDestroy=function(t){},e}(l),d=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return d(e,t),e.prototype.onHit=function(t){},e.prototype.onDestroy=function(t){},e.prototype.onHarvest=function(t){},e}(l),_=n(1),v=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),P=function(t){function e(){var e=t.call(this)||this;return e.tileContainer=new r.Container,e.addChild(e.tileContainer),e.tileObjectContainer=new r.Container,e.addChild(e.tileObjectContainer),e.playerContainer=new r.Container,e.addChild(e.playerContainer),e.players=[],e}return v(e,t),e.prototype.getMapObjectProperty=function(t,e){for(var n=0,i=t.properties;n<i.length;n++){var r=i[n];if(r.name==e)return r.value}},e.loadMap=function(t,n,i){var o=new e,a=new r.Point(e.MAP_ZOOM,e.MAP_ZOOM);o.finalTileWidth=n.tileWidth*a.x,o.finalTileHeight=n.tileHeight*a.y,o.spritesheet=n,_.getJSON(t,{},(function(t){for(var e=0,r=t.layers;e<r.length;e++){if("tilelayer"==(P=r[e]).type){o.gridWidth=P.width,o.gridHeight=P.height,o.tiles=new Array(o.gridHeight);for(var s=0;s<o.tiles.length;s++)o.tiles[s]=new Array(o.gridWidth);for(var c=0;c<P.height;c++)for(var y=0;y<P.width;y++){var l=c*P.width+y;if(P.data[l]>0){var f=n.getTexture(P.data[l]),d=new u(f,c,y,o);o.addTile(d)}}}}for(var _=0,v=t.layers;_<v.length;_++){var P;if("objectgroup"==(P=v[_]).type){for(var O=0,w=P.objects;O<w.length;O++){if("player"==(A=w[O]).type){var T=Math.round(A.x*a.x),b=(Math.round(A.y)-A.height)*a.y,E=o.getMapObjectProperty(A,"playerId"),S=new p(T,b,this,E);o.addPlayer(S)}}for(var x=0,j=P.objects;x<j.length;x++){var A;if("tower"==(A=j[x]).type){f=n.getTexture(A.gid);var k=o.getMapObjectProperty(A,"owner"),K=o.players[k],D=o.getTileNearestTo(A),C=new h(f,D,K);o.addTileObject(C)}else if("tree"==A.type){f=n.getTexture(A.gid);var m=o.getTileNearestTo(A),I=new g(f,m);o.addTileObject(I)}}}}i(o)}))},e.prototype.addPlayer=function(t){this.players[t.playerId]=t,this.playerContainer.addChild(t.sprite)},e.prototype.addTileObject=function(t){t.scale=e.SPRITE_SCALE,this.playerContainer.addChild(t)},e.prototype.addTile=function(t){t.x=t.gridX*this.spritesheet.tileWidth*e.SPRITE_SCALE.x,t.y=t.gridY*this.spritesheet.tileHeight*e.SPRITE_SCALE.y,t.scale=e.SPRITE_SCALE,this.tiles[t.gridY][t.gridX]=t,this.tileContainer.addChild(t)},e.prototype.pause=function(){this.isPaused=!0},e.prototype.play=function(){this.isPaused=!1},e.prototype.getObjectCoordinates=function(t){var n=t.x*e.SPRITE_SCALE.x/this.finalTileWidth;n=Math.round(n);var i=(t.y-t.height)*e.SPRITE_SCALE.y/this.finalTileHeight;return{gridX:n,gridY:i=Math.round(i)}},e.prototype.getTileNearestTo=function(t){var e=this.getObjectCoordinates(t);return this.tiles[e.gridY][e.gridX]},e.MAP_ZOOM=4,e.SPRITE_SCALE=new r.Point(e.MAP_ZOOM,e.MAP_ZOOM),e}(r.Container),O=new o("data/assets/spritesheet.png",1,16,16,31,57);(function(){function t(){}return t.startGame=function(){var e=new function(t,e){this.width=t,this.height=e}(512,512);t.pixiApp=new r.Application(e),document.body.appendChild(t.pixiApp.view),a.init(),t.pixiApp.ticker.add(s.doStep),P.loadMap("data/maps/map1.json",O,(function(e){console.log("Map parsed"),t.map=e,t.pixiApp.stage.addChild(e),t.pixiApp.ticker.start();var n=e.players;n[0].setKeys("ArrowUp","ArrowDown","ArrowLeft","ArrowRight","m","n"),n[1].setKeys("w","s","a","d","x","y")}))},t})().startGame()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,